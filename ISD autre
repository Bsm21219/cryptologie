#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/time.h>
#include <math.h>

// Configuration des paramètres
#define MAX_ITERATIONS 1000000
#define PROGRESS_INTERVAL 10000

// Structure pour stocker une matrice
typedef struct {
    int** data;
    int rows;
    int cols;
} Matrix;

Matrix create_matrix(int rows, int cols) {
    Matrix mat;
    mat.rows = rows;
    mat.cols = cols;
    mat.data = (int**)malloc(rows * sizeof(int*));
    for (int i = 0; i < rows; i++) {
        mat.data[i] = (int*)calloc(cols, sizeof(int));
    }
    return mat;
}

void free_matrix(Matrix mat) {
    for (int i = 0; i < mat.rows; i++) {
        free(mat.data[i]);
    }
    free(mat.data);
}

void generate_random_matrix(Matrix mat, double density) {
    for (int i = 0; i < mat.rows; i++) {
        for (int j = 0; j < mat.cols; j++) {
            mat.data[i][j] = (rand() / (double)RAND_MAX) < density ? 1 : 0;
        }
    }
}

// Génère un vecteur d'erreur avec exactement t erreurs
void generate_error_vector(int* error, int n, int t) {
    memset(error, 0, n * sizeof(int));
    int* indices = (int*)malloc(n * sizeof(int));
    
    for (int i = 0; i < n; i++) {
        indices[i] = i;
    }
    
    // Fisher-Yates shuffle partiel
    for (int i = 0; i < t; i++) {
        int j = i + rand() % (n - i);
        int temp = indices[i];
        indices[i] = indices[j];
        indices[j] = temp;
        error[indices[i]] = 1;
    }
    
    free(indices);
}

void matrix_vector_mult(Matrix mat, int* vec, int* result) {
    for (int i = 0; i < mat.rows; i++) {
        result[i] = 0;
        for (int j = 0; j < mat.cols; j++) {
            result[i] ^= (mat.data[i][j] & vec[j]);
        }
    }
}

int hamming_weight(int* vec, int len) {
    int weight = 0;
    for (int i = 0; i < len; i++) {
        weight += vec[i];
    }
    return weight;
}

// Effectue l'élimination de Gauss sur la matrice H pour la mettre sous forme échelon
void gauss_elimination(Matrix H, int* pivot_cols) {
    int pivot_row = 0;
    
    for (int col = 0; col < H.cols && pivot_row < H.rows; col++) {
        // Trouve une ligne avec un 1 dans la colonne actuelle
        int found = -1;
        for (int row = pivot_row; row < H.rows; row++) {
            if (H.data[row][col] == 1) {
                found = row;
                break;
            }
        }
        
        if (found == -1) continue;
        
        // Échange les lignes si nécessaire
        if (found != pivot_row) {
            int* temp = H.data[pivot_row];
            H.data[pivot_row] = H.data[found];
            H.data[found] = temp;
        }
        
        pivot_cols[pivot_row] = col;
        
        // Élimine les autres 1 dans cette colonne
        for (int row = 0; row < H.rows; row++) {
            if (row != pivot_row && H.data[row][col] == 1) {
                for (int c = 0; c < H.cols; c++) {
                    H.data[row][c] ^= H.data[pivot_row][c];
                }
            }
        }
        
        pivot_row++;
    }
}

// ISD amélioré avec réduction gaussienne
int* solve_isd_improved(Matrix H, int* syndrome, int n, int t, int* found_iter, double* elapsed_time) {
    struct timeval start, end;
    gettimeofday(&start, NULL);
    
    int m = H.rows;
    int k = n - m;
    
    // Copie de la matrice pour la manipulation
    Matrix H_work = create_matrix(m, n);
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            H_work.data[i][j] = H.data[i][j];
        }
    }
    
    int* pivot_cols = (int*)malloc(m * sizeof(int));
    for (int i = 0; i < m; i++) pivot_cols[i] = -1;
    
    gauss_elimination(H_work, pivot_cols);
    
    int* solution = NULL;
    int* candidate = (int*)malloc(n * sizeof(int));
    int* computed = (int*)malloc(m * sizeof(int));
    
    // Paramètres pour ISD partitionné
    int p1 = (t * 2) / 3;  // Erreurs dans la partie information
    int p2 = t - p1;       // Erreurs dans la partie parité
    
    printf("ISD parameters: p1=%d, p2=%d\n", p1, p2);
    
    for (int iter = 0; iter < MAX_ITERATIONS; iter++) {
        if (iter % PROGRESS_INTERVAL == 0) {
            gettimeofday(&end, NULL);
            double current_time = (end.tv_sec - start.tv_sec) + (end.tv_usec - start.tv_usec) / 1000000.0;
            printf("Progress: %d iterations (%.1f sec)\r", iter, current_time);
            fflush(stdout);
        }
        
        memset(candidate, 0, n * sizeof(int));
        
        // Place p1 erreurs dans les k premières positions (partie information)
        int* info_indices = (int*)malloc(k * sizeof(int));
        for (int i = 0; i < k; i++) info_indices[i] = i;
        
        // Mélange et sélectionne p1 positions
        for (int i = 0; i < p1 && i < k; i++) {
            int j = i + rand() % (k - i);
            int temp = info_indices[i];
            info_indices[i] = info_indices[j];
            info_indices[j] = temp;
            candidate[info_indices[i]] = 1;
        }
        
        // Place p2 erreurs dans les m dernières positions (partie parité)
        int* parity_indices = (int*)malloc(m * sizeof(int));
        for (int i = 0; i < m; i++) parity_indices[i] = k + i;
        
        for (int i = 0; i < p2 && i < m; i++) {
            int j = i + rand() % (m - i);
            int temp = parity_indices[i];
            parity_indices[i] = parity_indices[j];
            parity_indices[j] = temp;
            candidate[parity_indices[i]] = 1;
        }
        
        matrix_vector_mult(H, candidate, computed);
        
        int match = 1;
        for (int i = 0; i < m && match; i++) {
            if (computed[i] != syndrome[i]) {
                match = 0;
            }
        }
        
        if (match) {
            solution = (int*)malloc(n * sizeof(int));
            memcpy(solution, candidate, n * sizeof(int));
            *found_iter = iter + 1;
            free(info_indices);
            free(parity_indices);
            break;
        }
        
        free(info_indices);
        free(parity_indices);
    }
    
    gettimeofday(&end, NULL);
    *elapsed_time = (end.tv_sec - start.tv_sec) + (end.tv_usec - start.tv_usec) / 1000000.0;
    
    free_matrix(H_work);
    free(pivot_cols);
    free(candidate);
    free(computed);
    return solution;
}

// Estimation de la complexité théorique
double estimate_complexity(int n, int k, int t) {
    double log_complexity = 0;
    
    // Approximation binomiale C(n,t) ≈ 2^(n*H(t/n)) où H est l'entropie binaire
    double p = (double)t / n;
    if (p > 0 && p < 1) {
        double entropy = -p * log2(p) - (1-p) * log2(1-p);
        log_complexity = n * entropy;
    } else {
        log_complexity = t * log2(n);
    }
    
    return log_complexity;
}

void run_test(int n, int k, int t) {
    printf("\n============================================================\n");
    printf("Running test: n=%d, k=%d, t=%d\n", n, k, t);
    
    double complexity = estimate_complexity(n, k, t);
    printf("Estimated log2(complexity): %.2f (2^%.0f operations)\n", complexity, complexity);
    
    if (complexity > 30) {
        printf("WARNING: Very high complexity, may take a very long time!\n");
    }
    
    int m = n - k;
    Matrix H = create_matrix(m, n);
    
    // Génère une matrice plus structurée pour de meilleurs résultats
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (j < k) {
                // Partie information : matrice aléatoire
                H.data[i][j] = rand() % 2;
            } else {
                // Partie parité : matrice identité si possible
                H.data[i][j] = (j - k == i) ? 1 : 0;
            }
        }
    }
    
    int* error = (int*)malloc(n * sizeof(int));
    generate_error_vector(error, n, t);
    
    int* syndrome = (int*)malloc(m * sizeof(int));
    matrix_vector_mult(H, error, syndrome);
    
    printf("Original error weight: %d\n", hamming_weight(error, n));
    printf("Syndrome weight: %d\n", hamming_weight(syndrome, m));
    
    int iterations = 0;
    double exec_time = 0;
    int* solution = solve_isd_improved(H, syndrome, n, t, &iterations, &exec_time);
    
    if (solution) {
        printf("\nSolution found after %d iterations (%.2f sec)\n", iterations, exec_time);
        printf("Solution weight: %d\n", hamming_weight(solution, n));
        
        // Vérification
        int* check = (int*)malloc(m * sizeof(int));
        matrix_vector_mult(H, solution, check);
        
        int valid = 1;
        for (int i = 0; i < m; i++) {
            if (check[i] != syndrome[i]) {
                valid = 0;
                break;
            }
        }
        
        printf("Solution is %svalid\n", valid ? "" : "in");
        
        // Compare avec l'erreur originale
        int differences = 0;
        for (int i = 0; i < n; i++) {
            if (error[i] != solution[i]) differences++;
        }
        printf("Differences with original error: %d positions\n", differences);
        
        free(check);
        free(solution);
    } else {
        printf("\nNo solution found after %d iterations (%.2f sec)\n", MAX_ITERATIONS, exec_time);
        printf("Consider increasing MAX_ITERATIONS or using a more sophisticated algorithm\n");
    }
    
    free_matrix(H);
    free(error);
    free(syndrome);
}

int main() {
    srand(time(NULL));
    
    printf("ISD Algorithm - Optimized Version\n");
    printf("==================================\n");
    
    // Tests progressifs
   // run_test(16, 8, 3);
    //run_test(20, 10, 4);
    //run_test(32, 16, 5);
    
    // Tests plus grands avec des paramètres plus réalistes
    //run_test(100, 50, 8);   // Réduit t de 10 à 8
    //run_test(200, 100, 10); // Test intermédiaire
    
    // Test très grand - attention, peut prendre du temps !
    printf("\nLarge test - this may take several minutes...\n");
    //run_test(400, 200, 20);  // Paramètres plus réalistes
    run_test(1000, 500, 10 );
    
    return 0;
}
