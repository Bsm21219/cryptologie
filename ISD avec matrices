#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/time.h>

// Configuration des param√®tres
#define MAX_ITERATIONS 10000000
#define PROGRESS_INTERVAL 100000

// Structure pour stocker une matrice
typedef struct {
    int** data;
    int rows;
    int cols;
} Matrix;

Matrix create_matrix(int rows, int cols) {
    Matrix mat;
    mat.rows = rows;
    mat.cols = cols;
    mat.data = (int**)malloc(rows * sizeof(int*));
    for (int i = 0; i < rows; i++) {
        mat.data[i] = (int*)calloc(cols, sizeof(int));
    }
    return mat;
}

void free_matrix(Matrix mat) {
    for (int i = 0; i < mat.rows; i++) {
        free(mat.data[i]);
    }
    free(mat.data);
}

void generate_random_matrix(Matrix mat, double density) {
    for (int i = 0; i < mat.rows; i++) {
        for (int j = 0; j < mat.cols; j++) {
            mat.data[i][j] = (rand() / (double)RAND_MAX) < density ? 1 : 0;
        }
    }
}

void generate_error_vector(int* error, int n, int t) {
    memset(error, 0, n * sizeof(int));
    int* indices = (int*)malloc(n * sizeof(int));
    
    for (int i = 0; i < n; i++) {
        indices[i] = i;
    }
    
    // Fisher-Yates shuffle partiel
    for (int i = 0; i < t; i++) {
        int j = i + rand() % (n - i);
        int temp = indices[i];
        indices[i] = indices[j];
        indices[j] = temp;
        error[indices[i]] = 1;
    }
    
    free(indices);
}

void matrix_vector_mult(Matrix mat, int* vec, int* result) {
    for (int i = 0; i < mat.rows; i++) {
        result[i] = 0;
        for (int j = 0; j < mat.cols; j++) {
            result[i] ^= (mat.data[i][j] & vec[j]);
        }
    }
}

int hamming_weight(int* vec, int len) {
    int weight = 0;
    for (int i = 0; i < len; i++) {
        weight += vec[i];
    }
    return weight;
}

int* solve_isd(Matrix H, int* syndrome, int n, int t, int* found_iter, double* elapsed_time) {
    struct timeval start, end;
    gettimeofday(&start, NULL);
    
    int m = H.rows;
    int* solution = NULL;
    int* candidate = (int*)malloc(n * sizeof(int));
    int* computed = (int*)malloc(m * sizeof(int));
    
    for (int iter = 0; iter < MAX_ITERATIONS; iter++) {
        if (iter % PROGRESS_INTERVAL == 0) {
            gettimeofday(&end, NULL);
            double current_time = (end.tv_sec - start.tv_sec) + (end.tv_usec - start.tv_usec) / 1000000.0;
            printf("Progress: %d iterations (%.1f sec)\r", iter, current_time);
            fflush(stdout);
        }
        
        generate_error_vector(candidate, n, t);
        matrix_vector_mult(H, candidate, computed);
        
        int match = 1;
        for (int i = 0; i < m && match; i++) {
            if (computed[i] != syndrome[i]) {
                match = 0;
            }
        }
        
        if (match) {
            solution = (int*)malloc(n * sizeof(int));
            memcpy(solution, candidate, n * sizeof(int));
            *found_iter = iter + 1;
            break;
        }
    }
    
    gettimeofday(&end, NULL);
    *elapsed_time = (end.tv_sec - start.tv_sec) + (end.tv_usec - start.tv_usec) / 1000000.0;
    
    free(candidate);
    free(computed);
    return solution;
}

void run_test(int n, int k, int t) {
    printf("\nRunning test: n=%d, k=%d, t=%d\n", n, k, t);
    
    int m = n - k;
    Matrix H = create_matrix(m, n);
    generate_random_matrix(H, 0.5);
    
    int* error = (int*)malloc(n * sizeof(int));
    generate_error_vector(error, n, t);
    
    int* syndrome = (int*)malloc(m * sizeof(int));
    matrix_vector_mult(H, error, syndrome);
    
    printf("Original error weight: %d\n", hamming_weight(error, n));
    
    int iterations = 0;
    double exec_time = 0;
    int* solution = solve_isd(H, syndrome, n, t, &iterations, &exec_time);
    
    if (solution) {
        printf("\nSolution found after %d iterations (%.2f sec)\n", iterations, exec_time);
        printf("Solution weight: %d\n", hamming_weight(solution, n));
        
        // Verification
        int* check = (int*)malloc(m * sizeof(int));
        matrix_vector_mult(H, solution, check);
        
        int valid = 1;
        for (int i = 0; i < m; i++) {
            if (check[i] != syndrome[i]) {
                valid = 0;
                break;
            }
        }
        
        printf("Solution is %svalid\n", valid ? "" : "in");
        free(check);
        free(solution);
    } else {
        printf("\nNo solution found after %d iterations (%.2f sec)\n", MAX_ITERATIONS, exec_time);
    }
    
    free_matrix(H);
    free(error);
    free(syndrome);
}

int main() {
    srand(time(NULL));
    
    // Small tests
    run_test(16, 8, 3);
    run_test(20, 10, 4);
    
    // Large tests
    run_test(100, 50, 10);
    run_test(400, 200, 20);
    run_test(1000,500,10);
    
    return 0;
}
